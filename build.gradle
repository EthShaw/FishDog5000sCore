// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
        classpath("gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.12.1") {
            exclude module: 'guava'
        }
    }
}

apply plugin: 'scala'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'idea'
apply plugin: "com.github.hierynomus.license"

license {
    excludes(["**/*.properties", "**/*.lang", "**/*.json", "**/*.png", "**/*.txt", "**/*.info", "**/*.mcmeta"])
}

/*plugins {
    id 'idea'
    id 'scala'
    id "net.minecraftforge.gradle.forge" version "2.0.2"
}*/

//Load config
file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

ext.buildNumber = 0

//Load the build number config if it exists
ext.confFile = file("build_number.properties")
if (confFile.exists()) {
    confFile.withReader {
        ext.prop = new Properties()
        prop.load(it)
        ext.buildNumber = prop['build_number'].toInteger()
        if (ext.buildNumber == null)
            ext.buildNumber = 0
        prop['build_number'] = (ext.buildNumber + 1).toString()
    }
}

archivesBaseName = config.core_archivesBaseName
version = config.core_major + "." + config.core_minor + "." + config.core_patch + "-" + config.core_release_type + "+" + ext.buildNumber
group = config.group


build {
    prop.store(confFile.newWriter(), null)
}

build.dependsOn licenseFormat

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    runDir = "run"
    useDepAts = true

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = config.mappings

    replaceIn 'src/main/scala/net/fishdog5000/core/FishdogsCore.scala'
    replace "@COREVERSION@", project.version
    replace "@MCVERSION@", config.minecraft_version
    replace ")//@DEPEND@//(", ", "
    replace "@FORGEVERSION@", config.forge_version

    replaceIn 'src/main/scala/net/fishdog5000/core/CoreConstants.scala'
    replace "true//@FALSE@", "false"
}

repositories {
    maven {
        url "http://dvs1.progwml6.com/files/maven"
    }
}

task deobfJar(type: Jar) {
    from(sourceSets.main.output)
    archiveName = "${archivesBaseName}-${version}-deobf.jar"
}

artifacts {
    archives deobfJar
}

sourceSets {
    main {
        scala {
            srcDirs = ['src/main/scala', 'src/main/java']
        }
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}

jar {
    manifest.attributes "Main-Class": "net.fishdog5000.core.Start"
}

dependencies {
    deobfCompile "mezz.jei:jei_${config.minecraft_version}:${config.JEI_version}"
}

idea {
    module {
        outputDir = file('build/classes/main')
        downloadJavadoc = true
        downloadSources = true
    }
    project {
        languageLevel = '1.7'
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace the versions in mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': config.minecraft_version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
